
app.post('/register', (req, res) => {
	var hide_show = {};
	hide_show.register_menu = "hide";
	var dane = req.body;
	var register_promise = new Promise(
		function(resolve0, reject0)
		{
			try
			{
				if(dane.haslo == dane.potwierdz_haslo)
				{
					console.log(req.body);

					var select_promise = new Promise(function (resolve, reject){
						var rows;
							pg.connect(process.env.DATABASE_URL, function(err, client, done) {
							client.query('SELECT name FROM users WHERE name = $1 ;', [dane.nazwa], function(err, result) {
							done();
							if (err)
							{ console.error(err); response.send("Error " + err); }
							else {
								console.log("result");
								console.log(result);
								rows = result.rows;
								console.log("result.rows");
								console.log(rows);
									resolve(rows);
							}

							});
						});

					})

					select_promise.then(
						function(resolve)
						{
							let i = 0;
							resolve.forEach(
								r => {
									i = i + 1;
								}
							);
							console.log("przed przed wpisaniem")
							console.log(i);
							console.log(resolve);

							if(i == 0)
							{
								console.log("przed wpisaniem")
								var my_id_key;
								var file_read_promise = new Promise(function(resolve, reject) {
									fs.readFile('./data/users', 'utf-8', (err, data) =>
								{
									if (err) throw err;
									console.log("plik");
									console.log(data);
									my_id_key = data[0] * 1;
									console.log("my_id_key po przypisaniu");
									console.log(my_id_key)
									resolve(my_id_key);
								});
							})
							file_read_promise.then(function(resolve)
							{
								console.log("file promise then")
									console.log(my_id_key);
									console.log("resolve in second then")
									console.log(resolve);
									pg.connect(process.env.DATABASE_URL, function(err, client, done) {
										client.query("INSERT INTO users VALUES ($1, $2, $3);", [my_id_key, dane.nazwa, hash(dane.haslo)], function(err, result) {
												done();
												if (err)
												{ console.error(err); }
												else
												{
													my_id_key = my_id_key + 1;
													fs.writeFile('./data/users', my_id_key, function(err) {
														if(err) {
															return console.log(err);
														}
													});
													console.log('Dodano nowego użytkownika');
													resolve0(true);
												}
												});
										});
									},
									function(reject)
									{
										console.log("Błąd odczytu pliku.")
									}
							)
							}
							else
							{
									//.alert("Nazwa użytkownika jest zajęta;")
									console.log("wolne nie true");
									reject0(true)
							}
						},
						function(err)
						{
							console.log("Błąd")
							console.log(resolve);
						}
					)
				}
				else
				{
					reject0("not_matching");
				}
			}
			catch(err)
			{
				console.log(err);
				//window.alert("Coś nie zadziałało. Jesli ciekawi Cię ztrona techniczna, to na konsoli wyświtla się to: \n" + err);
			}
		}
	);
	register_promise.then(
		function(resolve0)
		{
			var username = req.session.username;
			hide_show.register_menu = "register_complete"
			res.render('glowna', {'username': username, 'hide_show': hide_show})
			res.redirect('/')
		},
		function(reject0)
		{
			hide_show.register_menu = "show_with_error"
			if(reject0 == "not_matching")
			{
				hide_show.register_menu = "not_matching"
			}
			console.log("Ujojoj");
			var username
			if (!req.session.username)
			{
				username = 'Anonimowy'
			}
			else
				username = req.session.username
			res.render('glowna', {'username': username, 'hide_show': hide_show})
		}
	)
})



































var roomsKK = []
var usersKK = {}

var emptyBoardKK = [[-1, -1, -1],
				 [-1, -1, -1],
				 [-1, -1, -1]]









app.get('/roomsListKK', (req, res) =>
{
	var username;
	if(! req.session.username)
		username = "Aninymous"
	else
		username = req.session.username;
	res.render('roomsListKK', {'roomsKK': roomsKK, 'username': username})
})


app.get('/createRoomKK', (req, res) =>
{
	console.log('Created room: ' + req.query.name)
	var board = [[-1, -1, -1],
				 [-1, -1, -1],
				 [-1, -1, -1]]
	rooms.push({'name': req.query.name, 'playersKK': [], 'boardKK': board})
	res.redirect('/roomsKK/' + (rooms.length - 1))
})

app.get('/roomsKK/:id', (req, res) => 
{
	if(! req.session.username)
		username = "Aninymous"
	else
		username = req.session.username;
	var id = req.params.id
	if (rooms[id].players.length >= 2)
		res.redirect('/roomsListKK')
	else
		res.render('boardKK', {'name': rooms[id].name, 'roomNo': id, 'username': username})
})

io.on('connectionKK', function(socket) 
{
    console.log('Client connected: ' + socket.id)
    /*
    socket.emit('id', cnt++)
    if (cnt == 2)
    {
    	io.emit('start', {'id': Math.floor(2*Math.random())})
    }
    */
    socket.on('newgameKK', function()
    {
    	var roomNo = users[socket.id]
    	rooms[roomNo].board = [[-1, -1, -1],
				 			   [-1, -1, -1],
			    			   [-1, -1, -1]]
    	//console.log(emptyBoard)
    	for (var i = 0; i < rooms[roomNo].players.length; i++)
    		rooms[roomNo].players[i].emit('newgameKK')
    	//io.emit('newgame')
    })
    socket.on('move', function(data)
    {
    	var roomNo = users[socket.id]
    	rooms[roomNo].board[data.x][data.y] = data.id
    	//console.log(emptyBoard)
    	for (var i = 0; i < rooms[roomNo].players.length; i++)
    		rooms[roomNo].players[i].emit('move', {'board': rooms[roomNo].board, 'id': data.id})
    	//io.emit('move', {'id': data.id, 'x': data.x, 'y': data.y})
    })
	socket.on('join', function(roomNo)
	{
		socket.emit('id', rooms[roomNo].players.length)
		rooms[roomNo].players.push(socket)
		users[socket.id] = roomNo
		if (rooms[roomNo].players.length == 2)
		{
			var id = Math.floor(2*Math.random())
			rooms[roomNo].board = [[-1, -1, -1],
				 			   	   [-1, -1, -1],
			    			   	   [-1, -1, -1]]
			for (var i = 0; i < 2; i++)
				rooms[roomNo].players[i].emit('start', {'id': id})
		}
	})
	socket.on('disconnect', function()
	{
		console.log('Client disconnected: ' + socket.id)
		var roomNo = -1
		for (var i = 0; i < rooms.length; i++)
			for (var j = 0; j < rooms[i].players.length; j++)
				if (rooms[i].players[j] == socket)
				{
					rooms[i].players.splice(j, 1)
					roomNo = i
				}
		if (roomNo != -1 && rooms[roomNo].players.length == 0)
		{
			//rooms[roomNo].players[0].emit('newgame')
			rooms[roomNo].board = [[-1, -1, -1],
				 			      [-1, -1, -1],
			    			      [-1, -1, -1]]
			//rooms[roomNo].players[0].emit('id', rooms[roomNo].players.length - 1)
		}
		else if (roomNo != -1 && rooms[roomNo].players.length > 0)
		{
			rooms[roomNo].players[0].emit('withdrawal')
			rooms[roomNo].players[0].emit('id', rooms[roomNo].players.length - 1)
		}
		delete users.socket
	})
})

